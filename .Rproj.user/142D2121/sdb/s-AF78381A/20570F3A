{
    "collab_server" : "",
    "contents" : "library(mlr)\nrm(list = ls())\nOS = \"Windows\"\nset.seed(1)\n\n# Load the environment\nload(file = \"../Data_BenchmarkOpenMl/Final/DataMining/clas_time.RData\")\nclas_used = rbind(clas_time_small, clas_time_medium)\nOMLDATASETS = clas_used$did\nsource(file = \"benchmark_defs.R\")\n\n\n## Example 1 - Multi-core on a single computer\nsink('SnowFallExample.Rout', split=TRUE)\n.Platform\n.Machine\nR.version\nSys.info()\n\nlibrary(snowfall) \n# 1. Initialisation of snowfall. \n# (if used with sfCluster, just call sfInit()) \nsfInit(parallel=TRUE, cpus=10)\n\n# 2. Loading data. \n\n# 3. Wrapper, which can be parallelised. \nrunBenchmark <- function(data.index) {\n  \n  library(OpenML)\n  library(mlr)\n  \n  print(paste(\"debut dataset \", data.index))\n  print(Sys.time())\n  # get the dataset\n  omldataset = getOMLDataSet(data.index)\n  if (identical(omldataset$target.features, character(0))) {\n    omldataset$target.features=\"Class\"\n    omldataset$desc$default.target.attribute=\"Class\"\n  }\n  task = convertOMLDataSetToMlr(omldataset)\n  task$task.desc$id = paste(\"dataset\", data.index)\n  \n  \n  # learners\n  lrn.classif.lr = makeLearner(\"classif.logreg\", predict.type = \"prob\", fix.factors.prediction = TRUE)\n  lrn.classif.rf = makeLearner(\"classif.randomForest\", predict.type = \"prob\", fix.factors.prediction = TRUE)\n  lrn.classif.lrl1 = makeLearner(\"classif.LiblineaRL1LogReg\", predict.type = \"prob\", fix.factors.prediction = TRUE)\n  lrn.classif.lrl2 = makeLearner(\"classif.LiblineaRL2LogReg\", predict.type = \"prob\", fix.factors.prediction = TRUE)\n  lrn.list = list(lrn.classif.lr,lrn.classif.rf, lrn.classif.lrl1, lrn.classif.lrl2)\n  \n  # measures\n  measures = MEASURES\n  rdesc = makeResampleDesc(\"RepCV\", folds = 5, reps = 10, stratify = TRUE)\n  configureMlr(on.learner.error = \"warn\", show.learner.output = FALSE)\n  bmr = benchmark(lrn.list, task, rdesc, measures, keep.pred = FALSE, models = FALSE, show.info = FALSE)\n  print(paste(\"fin dataset \", data.index))\n  return(bmr)\n}\n\nwrapper <- function(data.index) {\ntryCatch({\n  \n  # benchmark\n  runBenchmark(data.index)\n}, error = function(e) return(paste0(\"The variable '\", data.index, \"'\", \n                                     \" caused the error: '\", e, \"'\")))\n}\n\n\n# 4. Exporting needed data and loading required \n# packages on workers. \nsfExport(\"MEASURES\", \"runBenchmark\") \nsfLibrary(cmprsk) \n\n# 5. Start network random number generator \n# (as \"sample\" is using random numbers). \nsfClusterSetupRNG() \n\n# 6. Distribute calculation\nstart <- Sys.time(); result <- sfLapply(OMLDATASETS, wrapper) ; Sys.time()-start\n\n\n# 7. Stop snowfall \nsfStop() \n\nsave(result, file = \"../Data_BenchmarkOpenMl/Final/Results/Windows/benchmark_results_snow_small-medium-l1L2_strat.RData\")\nprint(\"done with small\")\n",
    "created" : 1471510449754.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3453656740",
    "id" : "20570F3A",
    "lastKnownWriteTime" : 1471606753,
    "last_content_update" : 1471606753,
    "path" : "Z:/Raphael/GiHub/IBE_Benchmark-OpenML/ParallelComputing/benchmark_parallelExpereimentSnow.R",
    "project_path" : "ParallelComputing/benchmark_parallelExpereimentSnow.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}