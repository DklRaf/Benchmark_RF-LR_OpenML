{
    "collab_server" : "",
    "contents" : "rm(list = ls())\noptions( java.parameters = \"-Xmx16g\" )\nlibrary( \"RWeka\" )\nlibrary(OpenML)\nsaveOMLConfig(apikey = \"7a4391537f767ea70db6af99497653e5\", arff.reader = \"RWeka\", overwrite=TRUE)\n\nOS = \"Windows\"\n\nif (OS == \"OSX\") {\n  # OSX\n  githubdir = \"/Users/Shadok/Programmation/Github\"\n  dir = file.path(githubdir, \"BenchmarkOpenMl/FinalVersion/\")\n} else {\n  # windows\n  githubdir = \"Z:/Raphael/GiHub/\"\n  dir = file.path(githubdir, \"IBE_Benchmark-OpenML/\")\n}\n\nsetwd(file.path(githubdir, \"IBE_Benchmark-OpenML\"))\n\nsource(\"benchmark_dataMiningOpenML_functions.R\")\n\n\n# =============================\n# Part 1 : Get the basic informations \n# ============================= ----\n\n# Load the classification tasks informations if it does not exist yet\nif (!file.exists(\"../Data_BenchmarkOpenMl/list_of_tasks_infos/classifTasks.infos.RData\")) {\n  tasks = listOMLTasks()\n  classifTasks.infos = subset(tasks, task.type == \"Supervised Classification\" &    # classification\n                                NumberOfClasses == 2 &                             # binary classification\n                                NumberOfInstancesWithMissingValues == 0)           # no missing values\n  save(classifTasks.infos, file = \"../Data_BenchmarkOpenMl/list_of_tasks_infos/classifTasks.infos.RData\" )\n} else {\n  load(\"../Data_BenchmarkOpenMl/list_of_tasks_infos/classifTasks.infos.RData\")\n}\n\ndatasets.index = sort(unique(classifTasks.infos$did))\n\n\n\n# =============================\n# Part 2 : More detailed transformations\n# ============================= ----\n\nclas = classifTasks.infos\n\n## Selecting the tasks only with tasks.infos ----\n\n# remove the redundancies : 473 tasks\nclas = clas[order(clas$did),]\nlogic = diff(clas$did)>0\nclas = clas[logic,]\n\n# Friedman-, volcanoes- und trX-Datasets : 393 tasks\nclas = clas[substr(clas$name,1,9) != \"volcanoes\" & substr(clas$name,1,4) != \"fri_\" & substr(clas$name,1,3) != \"tr1\" & substr(clas$name,1,3) != \"tr2\" & substr(clas$name,1,3) != \"tr3\" & substr(clas$name,1,3) != \"tr4\", ]\n\n# remove the datasets with the same name, they correspond often to datasets with only very slight changes : 383\ndoublon = names(sort(table(clas$name)[table(clas$name) > 1]))\ndoublon = clas[clas$name %in% doublon,]\ndoublon = doublon[order(doublon$name), ]\n\ndiff.categorical <- function(x) {\n  x = as.factor(x)\n  n = length(x)\n  res = rep(NA,n)\n  res[1] = TRUE\n  \n  for (i in c(2:n)) {\n    res[i] = !identical(x[i-1],x[i])\n  }\n  res = res*1\n  return(res)\n}\n\ndiff.categorical(doublon$name)\n\nindexdoublon.useful = which(diff.categorical(doublon$name)==1)\nindexdoublon.notuseful = which(diff.categorical(doublon$name)==0)\ntask.id.notuseful = doublon$task.id[indexdoublon.notuseful]\nindexclas.notuseful = which(clas$task.id %in% task.id.notuseful)\nclas = clas[-indexclas.notuseful,]\n\n# Ordering according to size (n*p)\nclas = clas[order(clas$NumberOfFeatures * clas$NumberOfInstances), ]\n\n\n## Test the tasks loading each one of them ----\n\n# time to respond : 380 datasets\ntask.id.notresponding = c(7395, 7396, 10111,75127, 75144, 75145)\nclas = clas[-which(clas$task.id %in% task.id.notresponding),]\n\n# categorical target and test loading the datas\nnans = character(nrow(clas))\nnas.file <- file(\"../Data_BenchmarkOpenMl/Final/DataMining/nasRUN.Rout\", open = \"wt\")\nsink(nas.file)\nsink(nas.file, type = \"message\")\n\nfor(j in 1:nrow(clas)){\n  tryCatch({\n    print(j)\n    \n    # with dataset\n    omldataset = getOMLDataSet(did = clas$did[j], verbosity = 0)\n    if (identical(omldataset$target.features, character(0))) {\n      omldataset$target.features=\"Class\"\n      omldataset$desc$default.target.attribute=\"Class\"\n    }\n    nans[j] = class(omldataset$data[, omldataset$target.features])\n    \n    save(nans, file = \"../Data_BenchmarkOpenMl/Final/DataMining/nans_clas.RData\")\n    print(nans[j])\n    gc()\n  }, error = function(e) return(paste0(\"The variable '\", j, \"'\", \n                                       \" caused the error: '\", e, \"'\"))\n)}\n\nsink()\nsink(type = \"message\")\nfile.show(\"../Data_BenchmarkOpenMl/Final/DataMining/nasRUN.Rout\")\nprint(\"end of nas\")\n\n# what up with the logicals and data.frame ?\n# seems like no problem fo the logicals\n# for the data.frame it seems the target has not been specified. It usually is \"class\"\n\n\n\n\n\n# Remove the data with more than 53 categories and get the time of training for a RF\n\n\n# =============================\n# Part 3 : Get the dimension as a feature\n# ============================= ----\n\n## Dimension\n\ndimension = rep(NA, nrow(clas))\n\n# Begin loop\nfor (j in c(1:nrow(clas)) ) {\n  print(paste(\"iteration \", j))\n  try({\n    omldataset = getOMLDataSet(did = clas$did[j], verbosity = 0)\n    if (identical(omldataset$target.features, character(0))) {\n      omldataset$target.features=\"Class\"\n      omldataset$desc$default.target.attribute=\"Class\"\n    }\n    mlrtask = convertOMLDataSetToMlr(omldataset)\n    res = getTaskDimension(mlrtask)\n    print(res)\n    dimension[j] = res\n  })\n}\n\nclas$dimension = dimension\n\n\n\n# =============================\n# Part 4 : Save it\n# ============================= ----\n\n# Ordering according to size (n*dimension)\nclas = clas[order(clas$dimension * clas$NumberOfInstances), ]\n\nplot(clas$NumberOfInstances)\nplot(clas$dimension)\n\nhist(clas$NumberOfFeatures)\nhist(clas$NumberOfInstances)\n\nclas_small = clas[which(clas$NumberOfInstances < 1e3 & clas$dimension < 1e3),]\nclas_big = clas[which(clas$NumberOfInstances * clas$dimension > 1e6 | clas$dimension > 1e3 | clas$NumberOfInstances > 1e5),]\nclas_medium = clas[which(!(clas$task.id %in% c(clas_big$task.id, clas_small$task.id))),]\n\nsave(clas, clas_small, clas_medium, clas_big, file = \"../Data_BenchmarkOpenMl/Final/DataMining/clas.RData\" )\n\nplot(clas_big$NumberOfInstances)\nplot(clas_big$dimension)\n\nplot(clas_medium$NumberOfInstances)\nplot(clas_medium$dimension)\n\n# =============================\n# Part 5 : (optional) Add the time of training\n# ============================= ----\n\nload(file = \"../Data_BenchmarkOpenMl/Final/DataMining/clas.RData\" )\n\n## time train of a randomforest\nrf.timetrain = rep(NA, nrow(clas))\n\n# Begin loop\nfor (j in c(1:nrow(clas)) ) {\n  print(paste(\"iteration \", j))\n  try({\n    omldataset = getOMLDataSet(did = clas$did[j], verbosity = 0)\n    if (identical(omldataset$target.features, character(0))) {\n      omldataset$target.features=\"Class\"\n      omldataset$desc$default.target.attribute=\"Class\"\n    }\n    mlrtask = convertOMLDataSetToMlr(omldataset)\n    \n    # get the time of training\n    lrn.classif.rf = makeLearner(\"classif.randomForest\", predict.type = \"prob\", fix.factors.prediction = TRUE)\n    measures = list(timetrain)\n    rdesc = makeResampleDesc(\"Holdout\", split = 0.2, stratify = TRUE)\n    time.train = getTaskDimension(mlrtask)\n    configureMlr(on.learner.error = \"warn\", show.learner.output = FALSE)\n    bmr = benchmark(lrn.classif.rf, mlrtask, rdesc, measures, keep.pred = FALSE, models = FALSE, show.info = FALSE)\n    perfs = getBMRPerformances(bmr, as.df = TRUE)\n    time.train = sum(perfs$timetrain)\n    save(rf.timetrain, file = \"../Data_BenchmarkOpenMl/Final/DataMining/rf.timetrain.RData\" )\n    \n    print(time.train)\n    rf.timetrain[j] = time.train\n  })\n}\n\nclas_time = clas\nclas_time$rf.timetrain = rf.timetrain\n\n# reorder according to time and na\nclas_time = clas_time[order(clas_time$rf.timetrain), ]\n\n# save it\nsave(clas_time, file = \"../Data_BenchmarkOpenMl/Final/DataMining/clas_time.RData\" )\n\n",
    "created" : 1471449308157.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2003770163",
    "id" : "403F9E55",
    "lastKnownWriteTime" : 1471510651,
    "last_content_update" : 1471510860104,
    "path" : "Z:/Raphael/GiHub/IBE_Benchmark-OpenML/benchmark_dataMiningOpenML.R",
    "project_path" : "benchmark_dataMiningOpenML.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}